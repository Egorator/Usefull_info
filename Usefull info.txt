#Info about JDBC:
Port number: 3306 win serv name: MySQL57

To stop: in admin console go to directory: cd "C:\Program Files\MySQL\MySQL Server 5.7\bin\"
mysqladmin -u Egor -p shutdown

To start: admin cmd:
mysqld --console -h "C:\ProgramData\MySQL\MySQL Server 5.7\Data"

#Intellij idea set dependencies
File - Project structure - Modules - dependencies.

#Path to JDBC Driver in IntellijIdea:
C:\ProgramData\MySQL\Connector.J 5.1

#Path to DB in MySQL:
C:\ProgramData\MySQL\MySQL Server 5.7\Data\emp (emp is your DB name)

#MySQL show databases:
mysql> SHOW DATABASES;

#MySQL show tables in database:
mysql> show tables FROM emp;    (emp is your database)

#MySQL show table info:
mysql> DESCRIBE EMP.Employees;      (Employees is your table in database, EMP is your database)

#HotKey for multiline comment: Ctrl+Shift+/

#Compile java class with dependency on jar:
javac -cp PATH\TO\DEPENDENCY.jar YOUR_CLASS.java

#Run java class with dependency on jar:
java -cp PATH\TO\DEPENDENCY.jar;DIR_OF(MY_CLASS.class) MY_CLASS
java -cp junit-4.10.jar;. TestRunner2

#Git/SHELL set command on start:
go to C:\Users\Egorr, find file .bashrc, edit and write a command. Language to write on is bash, or sh

#Git/SHELL set alias:
go to C:\Users\Egorr, find file .bashrc, edit and write a command. Language to write on is bash, or sh
EXAMPLE:
alias gs='git status'

#Git show all  files commited into repository:
git ls-files --stage

#IntellijIdea build JAR file:
1)File>Save all
2)Build>Make project
3)File>Project Structure>Artifacts
4)Plus>Jar>From modules with dependencies
5)Make sure that "extract to the target JAR" radiobutton is checked
6)Choose "Main Class" from "...", choose yours (e.g. Home.Egor.Main)>click OK
7)Click checkbox "Build on make"!
8)Apply, OK, Build>Make Project
9)Search for JAR in "out/" folder

#Windows cmd call HELP:
YOUR_COMMAND /?

#IntellijIdea setup "run configuration":
1)File>Save all, Build>Make Project
2)Run>Edit configurations>plus[+]>JAR application
3)Set Path to JAR
4)Click plus[+] "Before launch: Activate tool window">Build artifacts, select your jar
5)Apply, ok

#Git clone repository for server:
git clone --bare file://PATH_TO_REPO
NOTE: remove --bare for full copy


#Get information about hard disks, usb sticks, their partitions under Linux:
ls /dev | grep sd

#Get information about mounted partitions:
mount | grep sd

#Unmount partition (if any):
umount /dev/sdX1

#Destroy partition table under Linux(input file is file full of zeros, output file is our usb. bs is bytes to copy per iteration, count is a number of iterations(hense, we copy 1024 * 1024 bytes)):
sudo dd if=/dev/zero of=/dev/sdX bs=1024 count=1024

#Create partition table and partitions on device
sudo fdisk /dev/sdX

#Fdisk commands:
o: create a new empty DOS partition table
p: print the partition table
n: add a new partition
//we select primary partition and leave default start sector and end sector
a: toggle a bootable flag
t: change a partition type
//then we choose fat32 (LBA), partition type: c
w: write table to disk and exit

#Read manuals for detaled information about formatting partition:
man mkfs
man mkfs.vfat

#Formatting partition:
mkfs -t vfat -F 32 -n ENTERYOURPARTITIONNAME /dev/sdX1

#Grub installation:
sudo grub-install --boot-directory=/media/student/BOOTABLE_US/boot /dev/sdX

#Create grub configuration file: 
/media/student/BOOTABLE_US/boot/grub/grub.cfg
//see example https://raw.githubusercontent.com/v-slava/dotrc/master/other_files/grub.cfg


Linux shell command to list runnin processes theirs ids:
ps
Useful arguments for "ps" command:
ps -e : shows all processes instead of only showing ones that are associated with current user and current terminal (always use this argument by default!)
ps -eH : ("H" argument shows process hierarchy)
ps -eHf : ("f" argument shows more info about each process (also the command that started this process), not only the name of the process)
for details use "man ps"

To find process id of a process, you may use command somewhat like this: "ps -e | grep -i chrome" (where chrome is a name of your desired process)
or "pgrep chrome"

To search for text in man / less / vim command outputs, press slash ("/"), type your searched text and press enter. To navigate between search results, use "n" for next result and "Shift + n" for previous result respectively.

Redirect command output to file (stdout only) (example) : man ps > ps.txt

Redirect command output to another command's input: (example) : ps -e | grep -i chrome

Viewer for command output (useful for efficient viewing and navigating the page / command output) (for example if you want to apply a search, or if a console does not support scrolling, etc.) (example) : ps -e | less -i
Thus, "less" command is a viewer, it is an editor withot an edit function

How to display output of a file on the screen: cat (example: cat ps.txt)

To restart the whole system: sudo reboot (requires root credentials)

To kill process you need to use "kill" command and to pass process id to it (example: kill 4097). To kill the process "the hard way", use "kill -9 4097"

To view more detailed info from "ls" command: ls -l

Directory with information about the process: /proc/1738 (where 1738 is an id of your process). Interesting files in such directories: cmdline, comm, exe, cwd, fd
cwd stands for Current Working Directory, maybe it's path will lead you to the .sh that started this process. exe is a symbolic link that leads to the executable file (binary executable).
cmdline file contains path to an executable file (scrips or binary, etc) and arguments (if any) that were passed to the corresponding interpreter (if any) when it was invoked.
fd stands for file descriptor, it contains a list of files that are opened by this process at the current moment.

To reboot the whole system: use "sudo reboot". NOTE! ASK OTHERS ABOUT WETHER MAY YOU DO THIS COMMAND!

To view file properties and details info, use "file /medie/somethingelse/yourfile" command, where yourfile is your file
If this command states that this file is ELF, than this is an executable binary file, not a script of some kind.

How to view which files process had opened during its runtime:
strace -f -s 8192 -o trace_file.txt -e trace=openat telegram -argument
, where 8192 is a maximum length of a line of an output file (use big number, nevermind), telegram is a name of your executable(binary or script of any kind, etc), and -argument is an argument (enter multiline if any). This command creates trace_file.txt in current working directory and writes in it a list of files opened at any time by your executable. 

Display processes that have open network connections and ports: netstat -apn

RPM is a package manager and also an extension of package format. Useful commands:
rpm -qa : list of all installed packages (execute in any place)
rpm -ql [PACKAGE_NAME] : list of all files from PACKAGE_NAME package

To find out ip of a current server: ifconfig

To find a file by filename in bash / linux consoles, use find -name (e.g. find -name 'log4*.jar', or find -name 'log4j.jar')


#SVN #Subversion
Command to clean (remove) all unversioned files from you svn repo:
svn cleanup . --remove-unversioned

Bash command to show revision changes (analog of git show):
svn diff -c [REVISION_NUMBER]



#Tortoise SVN
How to check the branch name:
In file explorer, right-click on root folder of this project, choose TortoiseSVN->Repo-browser. In URL inputbox you'll see the name of a branch (for example, in svn folder I see [your_repo_root] folder, but in repo-browser I see https://[your_host]/[your_repo_root]/trunk , thus, branch is named "trunk")

How to create a patch FROM EXISTING COMMIT using TortoiseSVN:
Go to root folder of your repo, click LKM, choose TortoiseSVN -> show log.
Find your commit and click RKM -> show changes as unified diff.
In newely opened window click file -> save as -> ... (save file somewhere with adequate name)
